@using Sandbox;
@using Sandbox.UI;
@using GameJam.UI.Core;

@namespace GameJam
@inherits Panel

<style>
	VillageHUD {
		position: absolute;
		left: 0px;
		top: 0px;
		width: 100%;
		height: 100%;
		color: white;
		font-family: PatrickHand;

		.structures {
			position: absolute;
			width: 100%;
			flex-direction: row;
			height: 80px;
			background-color: darken(#2c2825cc, 0.5);
			box-shadow: 0px 0px 45px #00000096;
			border-top: 4px #2c2825cc;
			bottom: 0px;
			transform: translateY(0%);
			justify-content: center;
			transition: transform 0.5s ease-in-out;

			.slot {
				width: 100px;
				aspect-ratio: 1;
				margin-right: 40px;
				margin-left: 40px;
				bottom: 50%;
				backdrop-filter: blur(5px);
				background-color: #2c2825cc;
				box-shadow: 0px 0px 45px #00000096;
				transform: translateX(-50%) rotate(-2deg);
				transition: width 0.25s ease-in, bottom 0.25s ease-in, transform 0.2s ease-in-out, border 0.2s ease-in-out;
				border: 4px #2c2825cc;
				pointer-events: auto;

				&:hover {
					width: 140px;
					bottom: 80px;
					border: 4px rgba(white, 0.5);
				}

				.title {
					left: 50%;
					top: -45px;
					background-color: #2c2825cc;
					box-shadow: 0px 0px 45px #00000096;
					border-radius: 5px;
					transform: translateX(-50%) rotate(-2deg);
					transition: transform 0.2s ease-in-out;
					padding: 5px;
					height: 35px;
					flex-shrink: 0;
					transform-origin: center;
				}

				.shadow {
					position: absolute;
					margin-left: 8px;
					margin-top: 8px;
				}
				
				.icon {
					position: absolute;
					width: 100%;
					height: 100%;
					background-size: 100%;
					background-position: center;
				}
			}

			&.hidden {
				transform: translateY(250%);
			}
		}
	}
</style>

<root>
    <Resources></Resources>

	<panel class="structures" @ref=structureContainer >
		@{
			var structures = ResourceLibrary.GetAll<Prefab>()
				.Where( p => p?.Root?.Class == "BaseStructure" );
			foreach ( var structure in structures )
			{
				var root = structure.Root;
				var name = root.GetValue<string>( "Title" );

				<panel class="slot" style="transform: rotate(@(Game.Random.Int( -3, 3)))" @onclick=@(() => startBuilding( structure ))>
					<panel class="title" style="transform: translateX(-50%) rotate(@(Game.Random.Int( -3, 3)))">
						<WiggleText Scale="@(0.22f)" Invert="@(false)" class="shadow" Value="@(name)" />
						<WiggleText Scale="@(0.22f)" Value="@(name)" />
					</panel>
					<PrefabIcon class="icon" Prefab="@structure" />
				</panel>
			}
		}
	</panel>
</root>

@code {
	Panel structureContainer;

	Prefab structurePrefab;
	SceneObject? buildObject;

	[Event.Hotload]
	private void hotload()
	{
		if ( !Game.IsClient )
			return;

		buildObject?.Delete();
		buildObject = null;
	}

	private void startBuilding( Prefab structure )
	{
		buildObject?.Delete();

		var root = structure.Root;
		var name = root.GetValue<string>( "Model" );

		buildObject = new SceneObject( Game.SceneWorld, name );
		buildObject.SetMaterialOverride( Material.Load( "materials/building/building_transparent.vmat" ) );
		buildObject.Attributes.Set( "color", Color.Red );
		structurePrefab = structure;
	}

	public override void OnButtonEvent( ButtonEvent e )
	{
		base.OnButtonEvent( e );

		if ( e.Button == "mouseleft" && !e.Pressed )
		{
			if (buildObject != null && structurePrefab != null && !structureContainer.HasHovered)
			{
				BaseStructure.RequestBuild( structurePrefab.ResourceName, buildObject.Bounds.Mins, buildObject.Bounds.Maxs );
				buildObject?.Delete();
				buildObject = null;
			}
		}
	}

	public override void Tick()
	{
		if ( Game.LocalPawn is not Lord pawn )
			return;

		structureContainer?.SetClass( "hidden", !pawn.Overview );

		if ( buildObject != null && buildObject.IsValid() )
		{
			if ( !pawn.Overview )
			{
				buildObject.Delete();
				buildObject = null;

				return;
			}

			var dir = Screen.GetDirection( Mouse.Position );
			var ray = new Ray( Camera.Position, dir );

			var trace = Trace.Ray( ray, 10000f)
				.WorldOnly()
				.Run();

			var town = GameMgr.CurrentTown;
			if ( town == null )
				return;

			var difference = (trace.HitPosition - town.Position);
			var targetPosition = (town.Position + difference.Normal * Math.Clamp(difference.Length, -town.TownRadius, town.TownRadius))
				.WithZ( town.Position.z );

			buildObject.Position = Vector3.Lerp( buildObject.Position, targetPosition, 10f * Time.Delta );
			buildObject.Rotation = Rotation.LookAt( buildObject.Position - town.Position );

			var boundsTrace = Trace.Box( buildObject.Bounds, Vector3.Zero, Vector3.Zero )
				.WithTag( "structure" )
				.Run();

			var canBuild = boundsTrace.Entity is null 
				&& GameMgr.TotalWood >= structurePrefab.Root.GetValue<int>( "Wood" )
				&& GameMgr.TotalWomen >= structurePrefab.Root.GetValue<int>( "Women" );

			var color = canBuild
				? Color.White
				: Color.Red;
			buildObject.Attributes.Set( "color", color );
			DebugOverlay.Box( buildObject.Bounds.Mins, buildObject.Bounds.Maxs, color );
		}
	}
}
