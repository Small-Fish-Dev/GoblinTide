@using Sandbox.UI;
@namespace GameJam.UI
@inherits Panel

<style>
	Actor {
		position: relative;
	}
</style>

@code {

	private Vector2? _position;

	public bool ReadyToPosition { get; private set; }

	private bool _shouldUpdate;

	internal Vector2 Offset;

	public Vector2 Position
	{
		get
		{
			_position ??= GetInitialPosition();
			return _position.Value;
		}

		set
		{
			_position = value;
			PositionHasChanged();
		}
	}

	private Vector2 GetInitialPosition() => ModifyInitialPosition( new Vector2
	{
		x = Box.Rect.Left * ScaleFromScreen,
		y = Box.Rect.Top * -ScaleFromScreen
	} );

	protected virtual Vector2 ModifyInitialPosition( Vector2 position ) => position;

	protected virtual float WobbleAmount => 2.0f;
	protected virtual float WobbleDelay => 0.60f;

	private RealTimeUntil _nextWobble = 0.60f;
	private Vector2 _wobbleOffset = Vector2.Zero;

	protected virtual Vector2 DoPositionEffect( Vector2 position ) => position + _wobbleOffset;

	public void PositionHasChanged() => _shouldUpdate = true;

	public override void Tick()
	{
		base.Tick();

		if ( ReadyToPosition )
		{
			if ( _nextWobble )
			{
				_wobbleOffset = Vector2.Random * WobbleAmount;
				_nextWobble = WobbleDelay;
				PositionHasChanged();
			}

			if ( _shouldUpdate )
			{
				var position = _position.Value;
				position = DoPositionEffect( position );
				Style.Left = Length.Pixels( position.x.Floor() );
				Style.Top = Length.Pixels( position.y.Floor() );

				StateHasChanged();
			}
		}

		if ( ReadyToPosition ) return;

		if ( Box.Rect is { Width: 0, Height: 0 } ) return;

		Position = Position;

		ReadyToPosition = true;
	}

}
