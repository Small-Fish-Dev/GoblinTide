@using GameJam.UI
@using Sandbox;
@using Sandbox.UI;

@namespace GameJam
@inherits RootPanel

<style>
	HUD {
		position: absolute;
		left: 0px;
		top: 0px;
		width: 100%;
		height: 100%;
		color: white;

		.inputContainer {
			position: absolute;
			right: 30px;
			bottom: 30px;
			justify-content: flex-start;
			flex-direction: column;
			align-items: flex-end;
			
			InputGlyph {
				margin-top: 10px;
				flex-grow: 0;
				flex-shrink: 0;
			}
			z-index: 3;
		}
	}
</style>

<root>
	<eventlogger/>
	<gameplayhints/>
	<crosshair />

	<resources />

	<panel class="inputContainer">
		<inputglyph text="Skill Tree" button=@InputButton.Chat />
		<inputglyph text="Overview" button=@InputButton.Score />
		<inputglyph text="Map" button=@InputButton.Reload />
	</panel>
</root>

@code {
	public static HUD Instance { get; private set; }
	public bool Dragging { get; set; } = false;

	public HUD()
	{
		Instance?.Delete( true );
		Instance = this;
		WorldMapContent.Create();
	}

	public override void OnButtonEvent( ButtonEvent e )
	{
		base.OnButtonEvent( e );

		// Mouse Right dragging.
		if ( e.Button != "mouseright" )
			return;

		Dragging = e.Pressed;
	}

	public override void Tick()
	{
		if ( Game.LocalPawn is not Lord pawn )
			return;

		Style.PointerEvents = pawn.Overview
			? PointerEvents.All
			: PointerEvents.None;

		Style.Cursor = pawn.Overview
			? "pointer"
			: "default";

		// Capture mouse. ?
		// SetMouseCapture( Dragging && pawn.Overview );

		// Overview movement by mouse position.
		if ( !pawn.Overview )
			return;

		var speed = 500f * Time.Delta;
		var scaleFactor = 3f;

		if ( Dragging )
		{
			var delta = -Mouse.Delta;
			pawn.OverviewOffset += speed * (Vector3.Right * delta.x + Vector3.Backward * delta.y);

			return;
		}

		var screenFraction = 0.05f;
		var fraction = Screen.Size * screenFraction;

		if ( Mouse.Position.x >= Screen.Size.x - fraction.x )
			pawn.OverviewOffset += Vector3.Right * speed * (scaleFactor * (Mouse.Position.x - Screen.Size.x * (1 - screenFraction)) / fraction.x);
		else if ( Mouse.Position.x <= fraction.x )
			pawn.OverviewOffset += Vector3.Left * speed * (scaleFactor * (fraction.x - Mouse.Position.x) / fraction.x);

		if ( Mouse.Position.y >= Screen.Size.y - fraction.y )
			pawn.OverviewOffset += Vector3.Backward * speed * (scaleFactor * (Mouse.Position.y - Screen.Size.y * (1 - screenFraction)) / fraction.y);
		else if ( Mouse.Position.y <= fraction.y )
			pawn.OverviewOffset += Vector3.Forward * speed * (scaleFactor * (fraction.y - Mouse.Position.y) / fraction.y);
	}

	[GameEvents.Initialize]
	private static void Refresh()
	{
		if ( Game.IsClient )
		{
			Instance?.Delete();
			Instance = null;

			new HUD();
			GameMgr.State?.Initialize(); // Reinitialize state on client.
		}
	}

	[Debug.Draw]
	private void DebugDraw()
	{
		Debug.Section( "HUD", () =>
		{
			foreach ( var child in _children )
			{
				var focus = child.HasFocus ? "(focused) " : "";
				Debug.Add($"{child} {focus}");
			}
		} );
	}
}
