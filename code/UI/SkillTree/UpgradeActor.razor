@using GameJam.UpgradeSystem
@using Sandbox.UI;

@namespace GameJam.UI
@inherits Panel
@attribute [StyleSheet( "/UI/SkillTree/UpgradeActor.scss" )]

<style>
	UpgradeActor {
		position: absolute;
        	
		width: 100px;
		height: 100px;
	
		background-color: red;
		
		font-size: 30px;
	}
</style>

<root>
	@Upgrade.Cost - @Upgrade.Title
</root>

@code {

	public Upgrade Upgrade { get; }

	// Generated by SkillTree
	public readonly List<UpgradeActor> Dependencies = new();

	public UpgradeActor( Upgrade upgrade ) => Upgrade = upgrade;

	private void UpdatePositioning()
	{
		var position = new Vector2();

	// note(gio): this isn't the right way to go about this - this should be container size
		position += Screen.Size / 2;

		position -= Box.Rect.Size / 2;

		position *= ScaleFromScreen;

		position += Upgrade.Position;

		position = ApplyWobble( position );

		position.x = float.Floor( position.x );
		position.y = float.Floor( position.y );

		Style.Left = Length.Pixels( position.x );
		Style.Top = Length.Pixels( position.y );

		StateHasChanged();
	}

	#region Wobble

	private Vector2 _wobble = Vector2.Zero;
	private RealTimeUntil _nextWobble = 0.04f;

	private Vector2 ApplyWobble( Vector2 position )
	{
		if ( _nextWobble )
		{
			_wobble = Vector2.Random * 3;
			_nextWobble = 0.18f;
		}
		return position + _wobble;
	}

	#endregion

	public override void Tick()
	{
		base.Tick();

		UpdatePositioning();
	}

	public override void DrawBackground( ref RenderState state )
	{
		base.DrawBackground( ref state );

		var a = Box.Rect.Center;

		foreach ( var b in Dependencies.Select( dependency => dependency.Box.Rect.Center ) )
		{
			GraphicsX.Line( a, b, 3, Color.Cyan );
		}
	}

}
