@using GameJam.UpgradeSystem
@using Sandbox.UI;

@namespace GameJam.UI
@inherits Actor
@attribute [StyleSheet( "/UI/SkillTree/UpgradeActor.scss" )]

<root>
	<div class="outer" @ref=Outer></div>
	<div class="inner">
		🐌
	</div>
</root>

@code {

	public Upgrade Upgrade { get; }

	private Panel Outer { get; set; }

	private bool Available => Upgrade.Cost <= 15 && !Purchased && Dependencies.All( v => v.Purchased );
	private bool Purchased => Lord.Self.HasUpgrade( Upgrade.Identifier );
	private bool Expensive => Upgrade.Cost > 15 && !Purchased;

	// Generated by SkillTree
	public readonly List<UpgradeActor> Dependencies = new();

	public UpgradeActor( Upgrade upgrade ) => Upgrade = upgrade;

	protected override Vector2 ModifyInitialPosition( Vector2 position )
	{
		Log.Info( position );
		return position + Upgrade.Position;
	}

	#region Wobble

	private Vector2 _wobble = Vector2.Zero;
	private RealTimeUntil _nextWobble = 0.04f;

	private Vector2 ApplyWobble( Vector2 position )
	{
		if ( _nextWobble )
		{
			var value = 3;
			var next = 0.18f;

			if ( !Available )
			{
				value = 1;
				next = 0.68f;
			}

			_wobble = Vector2.Random * value;
			_nextWobble = next;
		}
		return position + _wobble;
	}

	#endregion

	public override void Tick()
	{
		base.Tick();
		
		Outer.SetClass( "available", Available );
		Outer.SetClass( "purchased", Purchased );
		Outer.SetClass( "expensive", Expensive );
	}

}
